version: v0.1.0
scopeName: source.awsl
uuid: 77108132-b3a9-4456-b8e6-05fca177371a
information_for_contributors:
  - 'aster: galaster@foxmail.com'
keyEquivalent: ^~H
foldingStartMarker: |-
  (?x)
  (<(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|li|form|dl)\b.*?>
  |<!--(?!.*--\s*>)
  |^<!--\ \#tminclude\ (?>.*?-->)$
  |<\?(?:php)?.*\b(if|for(each)?|while)\b.+:
  |\{\{?(if|foreach|capture|literal|foreach|php|section|strip)
  |\{\s*($|\?>\s*$|//|/\*(.*\*/\s*$|(?!.*?\*/)))
  )
foldingStopMarker: |-
  (?x)
  (</(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|li|form|dl)>
  |^(?!.*?<!--).*?--\s*>
  |^<!--\ end\ tminclude\ -->$
  |<\?(?:php)?.*\bend(if|for(each)?|while)\b
  |\{\{?/(if|foreach|capture|literal|foreach|php|section|strip)
  |^[^{]*\}
  )
variables:
  jsxTagOrAtrributeIdentifier: '[_$[:alpha:]][-_$[:alnum:].]*'
  jsxTagNamespace: (?:({{jsxTagOrAtrributeIdentifier}})(?<!\.|-)(:))?
  jsxTagName: \s*{{jsxTagNamespace}}((?:[a-z][a-z0-9]*|({{jsxTagOrAtrributeIdentifier}}))(?<!\.|-))
  jsxOpeningTagWithoutAttributes: (<){{jsxTagName}}?\s*(>)
  jsxClosingTag: (</){{jsxTagName}}?\s*(>)
  jsxTagStartLookahead: (?={{jsxTagStart}})
  jsxTagStart: (<){{jsxTagName}}(?=((<\s*)|(\s+))(?!\?)|\/?>)
  jsxLookBehindInExpression: (?<!\+\+|--)(?<=[({\[,?=>:*]|&&|\|\||\?|\*\/|{{lookBehindAwait}}|^)\s*
  lookBehindAwait: '^await|{{nonPropertyLookBehind}}await'
  lookBehindReturn: '^return|{{nonPropertyLookBehind}}return'
  nonPropertyLookBehind: '[^\._$[:alnum:]]'
patterns:
  - include: '#comment'
  - name: invalid.illegal
    begin: '(<){{jsxTagName}}\s*(>)'
    end: '(</){{jsxTagName}}\s*(>)'
  - include: '#html'
repository:
  comment:
    patterns:
      - name: comment.block.awsl
        begin: (%%%)
        beginCaptures:
          '1': {name: punctuation.definition.comment.block.awsl}
        end: (%%%)
        endCaptures:
          '1': {name: punctuation.definition.comment.block.awsl}
        patterns:
          - include: text.html.markdown
      - name: comment.line.awsl
        match: (%).*$\n?
        captures:
          '1': {name: punctuation.definition.comment.line.awsl}
      - name: comment.block.html
        begin: <!--
        end: --\s*>
        captures:
          '0': {name: punctuation.definition.comment.html}
        patterns:
          - name: invalid.illegal.bad-comments-or-CDATA.html
            match: --
  keywords:
    patterns:
      - match: \b(using|macro|def|as|with|type|external|extending|where)\b
        name: keyword.control.definition.awsl
      - match: \b(if|else|ef|switch|match|case)\b
        name: keyword.control.flow.awsl
      - match: \b(do|while|loop|return|yield|break|pass)\b
        name: keyword.control.loop.awsl
      - begin: \b(for)\b
        beginCaptures:
          '1': {name: keyword.control.loop.awsl}
        end: \b(in)\b
        endCaptures:
          '1': {name: keyword.control.loop.awsl}
        patterns:
          - include: '#tag-stuff'
      - match: \b(is|not|or|and|in)\b
        name: keyword.operator.comparison.awsl
      - match: \b(true|false)\b
        name: keyword.control.awsl
      - match: \b(null)\b
        name: constant.language.null.awsl
      - include: '#let'
      - include: '#block'
  let:
    begin: \b(let)\b
    beginCaptures:
      '1': {name: storage.type.let.awsl}
    end: ([_0-9a-zA-Z]+)\s*[;=]|[{]
    endCaptures:
      '1': {name: entity.name.function.awsl} # variable.other.readwrite.awsl
    patterns:
      - match: ([_0-9a-zA-Z]+)
        name: storage.modifier.awsl
  block:
    begin: \b(block)\b
    beginCaptures:
      '1': {name: storage.type.trait.awsl}
    end: ([_0-9a-zA-Z]+)\s*[{};]
    endCaptures:
      '1': {name: entity.name.type.trait.awsl}
    patterns:
      - match: ([_0-9a-zA-Z]+)
        name: storage.modifier.awsl
  operators:
    patterns:
      - match: \b(===?|=!=|<=|>=|<>)\b
        name: keyword.operator.comparison.awsl
      - match: \b(\|>|/@|@@@|@@|@)\b
        name: keyword.operator.apply.awsl
      - match: \b(-|\+|\*|\/|\^)\b
        name: keyword.operator.arithmetic.awsl
      - match: \b(\?=|:=|=)\b
        name: keyword.operator.assignment.awsl
      - match: \b(∈|<:|:>|<-|->|:?)\b
        name: keyword.operator.set.awsl
      - match: \b(<|>)\b
        name: keyword.operator.comparison.awsl
      - match: \b(!|¬)\b
        name: keyword.operator.infix.awsl
      - match: \b(\?|°)\b
        name: keyword.operator.logical.awsl
  number:
    patterns:
      - match: (?<!\w)(0x[0-9a-fA-F]+)(_[A-Za-z][A-Za-z0-9_]*)?(?!\w)
        captures:
          '1': {name: constant.numeric.hex.awsl}
          '2': {name: keyword.control.handler.byte.awsl}
      - match: (?<!\w)(0o[0-7]+)(_[A-Za-z][A-Za-z0-9_]*)?(?!\w)
        captures:
          '1': {name: constant.numeric.oct.awsl}
          '2': {name: keyword.control.handler.byte.awsl}
      - match: (?<!\w)(0b[01]+)(_[A-Za-z][A-Za-z0-9_]*)?(?!\w)
        captures:
          '1': {name: constant.numeric.bin.awsl}
          '2': {name: keyword.control.handler.byte.awsl}
      - match: ([\+\-]?(0|([1-9](([0-9]|_[0-9])+)?))(?:(?:\.(0|([1-9](([0-9]|_[0-9])+)?)))?\*\*[\+\-]?[1-9]_?[0-9]*|(?:\.[0-9_]*)))
        captures:
          '1': {name: constant.numeric.decimal.awsl}
      - match: ([\+\-]?(0|[1-9][0-9]*))
        captures:
          '1': {name: constant.numeric.integer.awsl}
      - match: (¯|¨)
        captures:
          '1': {name: constant.numeric.control.awsl}
  string:
    patterns:
      - name: string.quoted.block.awsl
        begin: ([A-Za-z_][A-Za-z0-9_]*)?\s*(''')
        beginCaptures:
          '1': {name: keyword.control.handler.string.awsl}
          '2': {name: punctuation.definition.string.block.awsl}
        end: (''')
        endCaptures:
          '1': {name: punctuation.definition.string.block.awsl}
      - name: string.quoted.block.awsl
        begin: ([A-Za-z_][A-Za-z0-9_]*)?\s*(""")
        beginCaptures:
          '1': {name: keyword.control.handler.string.awsl}
          '2': {name: punctuation.definition.string.block.awsl}
        end: (""")
        endCaptures:
          '1': {name: punctuation.definition.string.block.awsl}
        patterns:
          - match: \\([btnfr"\\\n/]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
            name: constant.character.escape.awsl
          - match: \\[^btnfr/"\\\n]
            name: invalid.illegal.escape.awsl
      - match: ([A-Za-z_][A-Za-z0-9_]*)?\s*(\'[^'\\]*(?:\\.[^'\\]*)*\')
        captures:
          '1': {name: keyword.control.handler.string.awsl}
          '2': {name: string.quoted.single.awsl}
      - match: ([A-Za-z_][A-Za-z0-9_]*)?\s*("[^"\\]*(?:\\.[^"\\]*)*")
        captures:
          '1': {name: keyword.control.handler.string.awsl}
          '2': {name: string.quoted.single.awsl}
        patterns:
          - match: \\([btnfr"\\\n/]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
            name: constant.character.escape.awsl
          - match: \\[^btnfr/"\\\n]
            name: invalid.illegal.escape.awsl
      - match: (&[a-zA-Z]+;)|(&#[0-9]+;)
        name: constant.character.escape.awsl
  symbol:
    patterns:
      - match: \b([_a-zA-Z][_0-9a-zA-Z]*)\b
        name: meta.function-call.generic.python
      - match: \b(::)\b
        name: entity.name.function.namespace.awsl
  call:
    patterns:
      - begin: ([A-Za-z_][A-Za-z0-9_]*)\s*(\()
        beginCaptures:
          '1': {name: entity.name.tag.structure.any.awsl}
          '2': {name: punctuation.definition.tag.begin.awsl}
        end: (\))
        endCaptures:
          '1': {name: punctuation.definition.tag.end.awsl}
        patterns:
          - include: '#tag-stuff'
  key:
    patterns:
      - match: \b([a-zA-Z][_0-9a-zA-Z]*)\b\s*(=)
        captures:
          '1': {name: constant.language.key.awsl}
          '2': {name: keyword.operator.assignment.awsl}
  html:
    patterns:
      - name: meta.tag.sgml.html
        begin: <!
        end: '>'
        captures:
          '0': {name: punctuation.definition.tag.html}
        patterns:
          - name: meta.tag.sgml.doctype.html
            begin: (?i:DOCTYPE)
            end: (?=>)
            captures:
              '1': {name: entity.name.tag.doctype.html}
            patterns:
              - name: string.quoted.double.doctype.identifiers-and-DTDs.html
                match: '"[^">]*"'
              - name: constant.other.inline-data.html
                begin: \[CDATA\[
                end: ']](?=>)'
              - name: invalid.illegal.bad-comments-or-CDATA.html
                match: (\s*)(?!--|>)\S(\s*)

      - name: meta.tag.structure.any.html
        begin: (</?)((?i:body|head|html)\b)
        end: (>)
        endCaptures:
          '1': {name: punctuation.definition.tag.end.html}
        captures:
          '1': {name: punctuation.definition.tag.begin.html}
          '2': {name: entity.name.tag.structure.any.html}
        patterns:
          - include: '#tag-stuff'

      - name: meta.tag.block.any.html
        begin: (</?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\b)
        beginCaptures:
          '1': {name: punctuation.definition.tag.begin.html}
          '2': {name: entity.name.tag.block.any.html}
        end: (>)
        endCaptures:
          '1': {name: punctuation.definition.tag.end.html}
        patterns:
          - include: '#tag-stuff'

      - name: meta.tag.inline.any.html
        begin: (</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\b)
        beginCaptures:
          '1': {name: punctuation.definition.tag.begin.html}
          '2': {name: entity.name.tag.inline.any.html}
        end: '((?: ?/)?>)'
        endCaptures:
          '1': {name: punctuation.definition.tag.end.html}
        patterns:
          - include: '#tag-stuff'

      - name: meta.tag.other.html
        begin: (</?)([a-zA-Z0-9:-]+)
        beginCaptures:
          '1': {name: punctuation.definition.tag.begin.html}
          '2': {name: entity.name.tag.other.html}
        end: (>)
        endCaptures:
          '1': {name: punctuation.definition.tag.end.html}
        patterns:
          - include: '#tag-stuff'

      - match: (<>)
        name: entity.name.tag.fragment.begin.html
      - match: (</>)
        name: entity.name.tag.fragment.end.html
      - begin: (\{)
        end: (\})
        patterns:
          - include: '#html'
          - include: '#tag-stuff'
  tag-stuff:
    patterns:
      - include: '#string'
      - include: '#number'
      - include: '#key'
      - include: '#keywords'
      - include: '#call'
      - include: '#number'
      - include: '#symbol'
  # jsx syntax is taken from https://github.com/babel/babel-sublime
  jsx:
    patterns:
    - include: '#jsx-tag-without-attributes-in-expression'
    - include: '#jsx-tag-in-expression'

  #jsx tags
  jsx-tag-without-attributes-in-expression:
    begin: '{{jsxLookBehindInExpression}}(?={{jsxOpeningTagWithoutAttributes}})'
    end: (?!{{jsxOpeningTagWithoutAttributes}})
    patterns:
    - include: '#jsx-tag-without-attributes'

  jsx-tag-without-attributes:
    name: meta.tag.without-attributes.awsl
    begin: '{{jsxOpeningTagWithoutAttributes}}'
    end: '{{jsxClosingTag}}'
    beginCaptures:
      '1': {name: punctuation.definition.tag.begin.awsl}
      '2': {name: entity.name.tag.namespace.awsl}
      '3': {name: punctuation.separator.namespace.awsl}
      '4': {name: entity.name.tag.awsl}
      '5': {name: support.class.component.awsl}
      '6': {name: punctuation.definition.tag.end.awsl}
    endCaptures:
      '1': {name: punctuation.definition.tag.begin.awsl}
      '2': {name: entity.name.tag.namespace.awsl}
      '3': {name: punctuation.separator.namespace.awsl}
      '4': {name: entity.name.tag.awsl}
      '5': {name: support.class.component.awsl}
      '6': {name: punctuation.definition.tag.end.awsl}
    contentName: meta.jsx.children.awsl
    patterns:
    - include: '#jsx-children'

  jsx-tag-in-expression:
    # We need to differentiate between the relational '<' operator and the beginning of a tag using the surrounding context.
    begin: |-
      (?x)
        {{jsxLookBehindInExpression}}
        (?!<\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s+[^=>])|,)) # look ahead is not type parameter of arrow
        {{jsxTagStartLookahead}}
    end: (?!{{jsxTagStart}})
    patterns:
    - include: '#jsx-tag'

  jsx-tag:
    name: meta.tag.awsl
    begin: '{{jsxTagStartLookahead}}'
    end: (/>)|(?:{{jsxClosingTag}})
    endCaptures:
     '1': { name: punctuation.definition.tag.end.awsl }
     '2': { name: punctuation.definition.tag.begin.awsl }
     '3': { name: entity.name.tag.namespace.awsl }
     '4': { name: punctuation.separator.namespace.awsl }
     '5': { name: entity.name.tag.awsl }
     '6': { name: support.class.component.awsl }
     '7': { name: punctuation.definition.tag.end.awsl }
    patterns:
    - begin: '{{jsxTagStart}}'
      beginCaptures:
        '1': { name: punctuation.definition.tag.begin.awsl }
        '2': { name: entity.name.tag.namespace.awsl }
        '3': { name: punctuation.separator.namespace.awsl }
        '4': { name: entity.name.tag.awsl }
        '5': { name: support.class.component.awsl }
      end: (?=[/]?>)
      patterns:
      - include: '#comment'
      - include: '#jsx-tag-attributes'
    - begin: (>)
      beginCaptures:
        '1': { name: punctuation.definition.tag.end.awsl }
      end: (?=</)
      contentName: meta.jsx.children.awsl
      patterns:
      - include: '#jsx-children'

  #jsx children
  jsx-children:
    patterns:
    - include: '#jsx-tag-without-attributes'
    # Because this would be included from the jsx-children, this doesnt need to inspect surrounding context
    - include: '#jsx-tag'
    - include: '#jsx-evaluated-code'
    - include: '#jsx-entities'

  #entities and evaluated code
  jsx-evaluated-code:
    contentName: meta.embedded.expression.awsl
    begin: \{
    end: \}
    beginCaptures:
      '0': { name: punctuation.section.embedded.begin.awsl }
    endCaptures:
      '0': { name: punctuation.section.embedded.end.awsl }
    patterns:
    - include: '#tag-stuff'

  jsx-entities:
    patterns:
    - name: constant.character.entity.awsl
      match: (&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)
      captures:
        '1': {name: punctuation.definition.entity.awsl}
        '3': {name: punctuation.definition.entity.awsl}
    - name: invalid.illegal.bad-ampersand.awsl
      match: '&'

  #jsx attributes
  jsx-tag-attributes:
    name: meta.tag.attributes.awsl
    begin: \s+
    end: (?=[/]?>)
    patterns:
    - include: '#comment'
    - include: '#jsx-tag-attribute-name'
    - include: '#jsx-tag-attribute-assignment'
    - include: '#jsx-string-double-quoted'
    - include: '#jsx-string-single-quoted'
    - include: '#jsx-evaluated-code'
    - include: '#jsx-tag-attributes-illegal'

  jsx-tag-attribute-name:
    match: |-
      (?x)
        \s*
        (?:({{jsxTagOrAtrributeIdentifier}})(:))?
        ([_$[:alpha:]][-_$[:alnum:]]*)
        (?=\s|=|/?>|/\*|//)
    captures:
      '1': {name: entity.other.attribute-name.namespace.awsl}
      '2': {name: punctuation.separator.namespace.awsl}
      '3': {name: entity.other.attribute-name.awsl}

  jsx-tag-attribute-assignment:
    name: keyword.operator.assignment.awsl
    match: =(?=\s*(?:'|"|{|/\*|//|\n))

  jsx-string-double-quoted:
    name: string.quoted.double.awsl
    begin: '"'
    end: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.awsl}
    endCaptures:
      '0': {name: punctuation.definition.string.end.awsl}
    patterns:
    - include: '#jsx-entities'

  jsx-string-single-quoted:
    name: string.quoted.single.awsl
    begin: "'"
    end: "'"
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.awsl}
    endCaptures:
      '0': {name: punctuation.definition.string.end.awsl}
    patterns:
    - include: '#jsx-entities'

  jsx-tag-attributes-illegal:
    name: invalid.illegal.attribute.awsl
    match: \S+
